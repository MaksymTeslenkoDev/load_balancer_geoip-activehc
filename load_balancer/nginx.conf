load_module modules/ngx_http_geoip2_module.so;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/nginx/lua/?.lua;;";
    lua_shared_dict healthcheck 5m;

    geoip2 /etc/nginx/geoip/GeoLite2-Country.mmdb {
      $geoip2_data_country_iso_code default=default source=$http_x_forwarded_for country iso_code; 
    }

    log_format custom '$http_x_forwarded_for - country_code: $geoip2_data_country_iso_code';

    access_log /dev/stdout custom;
    error_log /dev/stderr;

    # Lua health checks
    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"

        local ok, err = hc.spawn_checker{
            shm = "healthcheck", 
            upstream = "us_backend", 
            type = "http",
            http_req = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n", 
            interval = 5000, 
            timeout = 1000, 
            fall = 3, 
            rise = 2, 
            valid_statuses = {200, 302}, 
        }
        

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "uk_backend",
            type = "http",
            http_req = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n",
            interval = 5000,
            timeout = 1000,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
        }

        local ok, err = hc.spawn_checker{
            shm = "healthcheck",
            upstream = "backend",
            type = "http",
            http_req = "GET / HTTP/1.1\r\nHost: localhost\r\n\r\n",
            interval = 5000,
            timeout = 1000,
            fall = 3,
            rise = 2,
            valid_statuses = {200, 302},
        }

        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }

    map $geoip2_data_country_iso_code $current_upstream {
      default backend;
      US us_backend; # US
      GB uk_backend; # UK
    }

    upstream us_backend {
        server 172.20.0.2:80;
        server 172.20.0.3:80;
        server 172.20.0.6:80 backup;
    }

    upstream uk_backend{
        server 172.20.0.4:80;
        server 172.20.0.6:80 backup;
    }

    upstream backend {
        server 172.20.0.5:80;
        server 172.20.0.6:80 backup;
    }

    server {
        listen 80;

        # Expose the content of the healthcheck dictionary at /healthcheck-status
        location /healthcheck-status {
            content_by_lua_block {
                local dict = ngx.shared.healthcheck  -- Reference the lua_shared_dict "healthcheck"
                local keys = dict:get_keys(0)  -- Get all keys

                if #keys == 0 then
                    ngx.say("No data in healthcheck dictionary")
                    return
                end

                ngx.say("Healthcheck Dictionary Contents:\n")
                
                -- Loop through each key and print its associated value
                for _, key in ipairs(keys) do
                    local value = dict:get(key)
                    ngx.say(key .. ": " .. (value or "nil"))
                end
            }
        }

        location / {
            proxy_pass http://$current_upstream;
        }
    }

}